{"version":3,"sources":["App.js","index.js"],"names":["itemsFromBackend","id","uuid","content","columnsFromBackend","_columnsFromBackend","Object","defineProperty","name","items","onDragEnd","result","columns","setColumns","destination","source","droppableId","_objectSpread2","sourceColumn","destColumn","sourceItems","toConsumableArray","destItems","_sourceItems$splice","splice","index","removed","slicedToArray","objectSpread2","column","copiedItems","_copiedItems$splice","App","_useState","useState","_useState2","react_default","a","createElement","style","display","justifyContent","height","react_beautiful_dnd_esm","entries","map","_ref","_ref2","columnId","flexDirection","alignItems","key","margin","provided","snapshot","assign","droppableProps","ref","innerRef","background","isDraggingOver","padding","width","minHeight","item","draggableId","draggableProps","dragHandleProps","userSelect","backgroundColor","isDragging","color","placeholder","rootElement","document","getElementById","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.7897bab4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport uuid from \"uuid/v4\";\n\nconst itemsFromBackend = [\n  { id: uuid(), content: \"Fresher with zero years of experience\" },\n  { id: uuid(), content: \"3 years of experience in react native\" },\n  { id: uuid(), content: \"3 years of experience in angular js\" },\n  { id: uuid(), content: \"1 year of experience in front end development\" },\n  { id: uuid(), content: \"Fresher yet to passout\" }\n];\n\nconst columnsFromBackend = {\n  [uuid()]: {\n    name: \"Applications\",\n    items: itemsFromBackend\n  },\n  [uuid()]: {\n    name: \"Relevant (<2 years)\",\n    items: []\n  },\n  [uuid()]: {\n    name: \"Perfectly matched(>2 years)\",\n    items: []\n  },\n  [uuid()]: {\n    name: \"Rejected(0 years)\",\n    items: []\n  }\n};\n\nconst onDragEnd = (result, columns, setColumns) => {\n  if (!result.destination) return;\n  const { source, destination } = result;\n\n  if (source.droppableId !== destination.droppableId) {\n    const sourceColumn = columns[source.droppableId];\n    const destColumn = columns[destination.droppableId];\n    const sourceItems = [...sourceColumn.items];\n    const destItems = [...destColumn.items];\n    const [removed] = sourceItems.splice(source.index, 1);\n    destItems.splice(destination.index, 0, removed);\n    setColumns({\n      ...columns,\n      [source.droppableId]: {\n        ...sourceColumn,\n        items: sourceItems\n      },\n      [destination.droppableId]: {\n        ...destColumn,\n        items: destItems\n      }\n    });\n  } else {\n    const column = columns[source.droppableId];\n    const copiedItems = [...column.items];\n    const [removed] = copiedItems.splice(source.index, 1);\n    copiedItems.splice(destination.index, 0, removed);\n    setColumns({\n      ...columns,\n      [source.droppableId]: {\n        ...column,\n        items: copiedItems\n      }\n    });\n  }\n};\n\nfunction App() {\n  const [columns, setColumns] = useState(columnsFromBackend);\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"center\", height: \"100%\" }}>\n      <DragDropContext\n        onDragEnd={result => onDragEnd(result, columns, setColumns)}\n      >\n        {Object.entries(columns).map(([columnId, column], index) => {\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\"\n              }}\n              key={columnId}\n            >\n              <h2>{column.name}</h2>\n              <div style={{ margin: 8 }}>\n                <Droppable droppableId={columnId} key={columnId}>\n                  {(provided, snapshot) => {\n                    return (\n                      <div\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        style={{\n                          background: snapshot.isDraggingOver\n                            ? \"lightblue\"\n                            : \"lightgrey\",\n                          padding: 4,\n                          width: 250,\n                          minHeight: 500\n                        }}\n                      >\n                        {column.items.map((item, index) => {\n                          return (\n                            <Draggable\n                              key={item.id}\n                              draggableId={item.id}\n                              index={index}\n                            >\n                              {(provided, snapshot) => {\n                                return (\n                                  <div\n                                    ref={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    style={{\n                                      userSelect: \"none\",\n                                      padding: 16,\n                                      margin: \"0 0 8px 0\",\n                                      minHeight: \"50px\",\n                                      backgroundColor: snapshot.isDragging\n                                        ? \"#263B4A\"\n                                        : \"#456C86\",\n                                      color: \"white\",\n                                      ...provided.draggableProps.style\n                                    }}\n                                  >\n                                    {item.content}\n                                  </div>\n                                );\n                              }}\n                            </Draggable>\n                          );\n                        })}\n                        {provided.placeholder}\n                      </div>\n                    );\n                  }}\n                </Droppable>\n              </div>\n            </div>\n          );\n        })}\n      </DragDropContext>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}